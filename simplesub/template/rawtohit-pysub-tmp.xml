<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">
  <execute>
    <processor name="AIDA"/>
    <processor name="UniversalNativeReader"/>
    <processor name="LoadHotPixelDB"/>
    <processor name="Mimosa26EUTelAutoPedestalNoiseProcessor"/>
    <processor name="Clustering"/>
    <processor name="APIXClustering"/>
    <processor name="HitMakerWithOutEta"/>
    <processor name="APIXHitMakerWithOutEta"/>
    <processor name="Save"/>
  </execute>

  <global>
    <parameter name="LCIOInputFiles"> </parameter>
    <parameter name="GearXMLFile" value="@GearFile@"/>
    <parameter name="MaxRecordNumber" value="500000000"/>
    <parameter name="SkipNEvents" value="0"/>
    <parameter name="SupressCheck" value="false"/>
    <parameter name="Verbosity" value="MESSAGE4"/>
  </global>

  <processor name="AIDA" type="AIDAProcessor">
    <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
    <!-- compression of output file 0: false >0: true (default) -->
    <parameter name="Compress" type="int" value="1"/>
    <!-- filename without extension-->
    <parameter name="FileName" type="string" value="@HistoPath@/run@RunNumber@-converter-histo"/>
    <!-- type of output file xml (default) or root ( only OpenScientist)-->
    <parameter name="FileType" type="string" value="root"/>
  </processor>

  <processor name="UniversalNativeReader" type="EUTelNativeReader">
    <!--Reads data streams produced by EUDAQ and produced the corresponding LCIO output-->
    <!--This is the eudrb producer output collection when read in RAW mode-->
    <parameter name="EUBRDRawModeOutputCollection" type="string" lcioOutType="TrackerRawData"> rawdata </parameter>
    <!--This si the mimotel output collection when read in ZS mode-->
    <parameter name="EUDRBZSModeOutputCollection" type="string" lcioOutType="TrackerData"> zsdata </parameter>
    <!-- Sorry, this parameter isn't a default parameter for this processor: description and type lost!!  -->
    <parameter name="EUDRBSensorIDVec"> 0 1 2 3 4 5 </parameter>
    <!--Type of sparsified pixel data structure (use SparsePixelType enumerator)-->
    <!--parameter name="EUDRBSparsePixelType" type="int" value="1"/-->
    <!--Pay attention to the boards TLU stamp and reshuffle the events to sync-->
    <parameter name="SyncTriggerID" type="bool" value="true"/>
    <!--The geometry identification number-->
    <parameter name="GeoID" type="int" value="56"/>
    <!--This is the input file name-->
    <parameter name="InputFileName" type="string" value="@NativePath@/run@RunNumber@.raw  "/>
  </processor>


  <processor name="LoadHotPixelDB" type="ConditionsProcessor">
    <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
    <parameter name="SimpleFileHandler" type="StringVec"> hotpixel_m26  @DbPath@/@NoiseDb@ hotpixel_m26 </parameter>
  </processor>

 <processor name="Mimosa26EUTelAutoPedestalNoiseProcessor" type="EUTelAutoPedestalNoiseProcessor">
 <!--EUTelAutoPedestalNoiseProcessor produces initial pedestal / noise / status with user provided values-->
  <!--Noise local collection-->
  <parameter name="NoiseCollectionName" type="string" lcioOutType="TrackerData"> m26_noise </parameter>
  <!--Pedestal local collection-->
  <parameter name="PedestalCollectionName" type="string" lcioOutType="TrackerData"> m26_pedestal </parameter>
  <!--Pixel status collection-->
  <parameter name="StatusCollectionName" type="string" lcioOutType="TrackerRawData"> m26_status </parameter>
  <!--The initial value of noise (one value for detector)-->
  <parameter name="InitNoiseValue" type="FloatVec"> 1 1 1 1 1 1 </parameter>
  <!--The initial value of pedestal (one value for detector)-->
  <parameter name="InitPedestalValue" type="FloatVec"> 0 0 0 0 0 0 </parameter>
  <!--The maximum pixel along x (default 255, one value per detector)-->
  <parameter name="MaxXVector" type="IntVec"> 1151 1151 1151 1151 1151 1151</parameter>
  <!--The maximum pixel along y (default 255, one value per detector)-->
  <parameter name="MaxYVector" type="IntVec"> 575 575 575 575 575 575  </parameter>
  <!--The minimum pixel along x (default 0, one value per detector)-->
  <parameter name="MinXVector" type="IntVec"> 0 0 0 0 0 0  </parameter>
  <!--The minimum pixel along y (default 0, one value per detector)-->
  <parameter name="MinYVector" type="IntVec"> 0 0 0 0 0 0</parameter>
  <!--The sensorID for the generated collection (one per detector)-->
  <parameter name="SensorIDVec" type="IntVec"> 0 1 2 3 4 5 </parameter>
</processor>


  <processor name="Clustering" type="EUTelClusteringProcessor">
    <parameter name="HotPixelCollectionName" type="string" value="hotpixel_m26" />
    <!-- INPUT / OUTPUT  -->
    <!--Input calibrated data not zero suppressed collection name-->
    <parameter name="NZSDataCollectionName" type="string" lcioInType="TrackerData"> data </parameter>
    <!--Noise (input) collection name-->
    <parameter name="NoiseCollectionName" type="string" lcioInType="TrackerData"> m26_noise </parameter>
    <!--Pixel status (input) collection name-->
    <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> m26_status </parameter>
    <!--Input of Zero Suppressed data-->
    <parameter name="ZSDataCollectionName" type="string" lcioInType="TrackerData"> zsdata_m26 </parameter>
    <!--Cluster (output) collection name-->
    <parameter name="PulseCollectionName" type="string" lcioOutType="TrackerPulse"> cluster_m26 </parameter>
    <!--Select here which algorithm should be used for ZS clustering.
        Available algorithms are:
        -> SparseCluster: for cluster in ZS frame
        -> SparseCluster2: for cluster in ZS frame with better performance
        -> FixedFrame: for cluster with a given size
        -> DFixedFrame: for cluster with a given size-->
    <parameter name="ZSClusteringAlgo" type="string" value="SparseCluster2"/>
    <parameter name="SparseClusterCut" type="float" value="0.0"/>
    <parameter name="SparseSeedCut" type="float" value="0.0"/>
    <parameter name="SparseMinDistance" type="float" value="0"/>

    <!-- HISTOGRAMMING  -->
    <parameter name="HistogramFilling" type="bool" value="true"/>
    <parameter name="HistoInfoFileName" type="string" value="@HistoInfo@"/>
    <parameter name="ClusterN" type="IntVec" value="4 6 8 9"/>
    <parameter name="ClusterNxN" type="IntVec" value="3"/>
  </processor>

  <processor name="APIXClustering" type="EUTelAPIXClusteringProcessor">
    <!--This is the name of the histogram information file-->
    <parameter name="ZSDataCollectionName" type="string" lcioInType="TrackerData"> zsdata_apix </parameter>
    <parameter name="HistoInfoFileName" type="string" value="@HistoInfo@"/>
  </processor>

  <processor name="HitMakerWithOutEta" type="EUTelHitMaker">
    <!--EUTelHitMaker is responsible to translate cluster centers from the local frame of reference to the external frame of reference using the GEAR geometry description-->
    <!--Cluster (pulse) collection name-->
    <parameter name="PulseCollectionName" type="string" lcioInType="TrackerPulse"> cluster_m26 </parameter>
    <!--Hit collection name-->
    <parameter name="HitCollectionName" type="string" lcioOutType="TrackerHit"> hit </parameter>
    <!--Select here how the center of gravity should be calculated.
	FULL: using the full cluster
	NPixel: using only the first N most significant pixels (set NPixel too)
	NxMPixel: using a subframe of the cluster N x M pixels wide (set NxMPixel too).-->
    <parameter name="CoGAlgorithm" type="string" value="NxMPixel"/>
    <!--If true a 3D histo will be filled. It may require large memory-->
    <parameter name="Enable3DHisto" type="bool" value="false"/>
    <!--The name of the collections containing the eta function (x and y respectively)-->
    <!--parameter name="EtaCollectionName" type="StringVec"> xEta yEta </parameter-->
    <!--Enable or disable eta correction-->
    <parameter name="EtaSwitch" type="bool" value="false"/>
    <!--The number of most significant pixels to be used if CoGAlgorithm is "NPixel"-->
    <!--parameter name="NPixel" type="int" value="9"/-->
    <!--The submatrix size to be used for CoGAlgorithm = "NxMPixel"-->
    <parameter name="NxMPixel" type="IntVec"> 3 3 </parameter>
  </processor>

  <processor name="APIXHitMakerWithOutEta" type="EUTelHitMaker">
    <!--EUTelHitMaker is responsible to translate cluster centers from the local frame of reference to the external frame of reference using the GEAR geometry description-->
    <!--Cluster (pulse) collection name-->
    <parameter name="PulseCollectionName" type="string" lcioInType="TrackerPulse"> cluster_apix </parameter>
    <!--Hit collection name-->
    <parameter name="HitCollectionName" type="string" lcioOutType="TrackerHit"> hit </parameter>
    <!--Select here how the center of gravity should be calculated.
	FULL: using the full cluster
	NPixel: using only the first N most significant pixels (set NPixel too)
	NxMPixel: using a subframe of the cluster N x M pixels wide (set NxMPixel too).-->
    <parameter name="CoGAlgorithm" type="string" value="NxMPixel"/>
    <!--If true a 3D histo will be filled. It may require large memory-->
    <parameter name="Enable3DHisto" type="bool" value="false"/>
    <!--The name of the collections containing the eta function (x and y respectively)-->
    <!--parameter name="EtaCollectionName" type="StringVec"> xEta yEta </parameter-->
    <!--Enable or disable eta correction-->
    <parameter name="EtaSwitch" type="bool" value="false"/>
    <!--The number of most significant pixels to be used if CoGAlgorithm is "NPixel"-->
    <!--parameter name="NPixel" type="int" value="9"/-->
    <!--The submatrix size to be used for CoGAlgorithm = "NxMPixel"-->
    <parameter name="NxMPixel" type="IntVec"> 3 3 </parameter>
  </processor>


  <processor name="Save" type="EUTelOutputProcessor">
    <!--Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
    <!--drops the named collections from the event-->
    <parameter name="DropCollectionNames" type="StringVec"> firstFrame secondFrame thirdFrame zsdata_m26 </parameter>
    <!--drops all collections of the given type from the event-->
    <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
    <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
    <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
    <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
    <!--parameter name="KeepCollectionNames" type="StringVec" value="MyPreciousSimTrackerHits"/-->
    <!-- name of output file -->
    <parameter name="LCIOOutputFile" type="string" value="@ResultPath@/run@RunNumber@-hit-p.slcio"/>
    <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
    <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
    <!--Set it to true to remove intermediate EORE in merged runs-->
    <parameter name="SkipIntermediateEORE" type="bool" value="true"/>
    <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
    <!--parameter name="SplitFileSizekB" type="int" value="1992294"/-->
  </processor>
</marlin>
